The head command
----------------

The `head` command prints the first 10 lines of a file:

  head names.txt

To print a different number of lines, use the `-n` flag:

  head -n 15 names.txt

To print all the lines excluding the LAST 15, add a minus sign to the count:

  head -n -15 names.txt


The tail command
----------------

The `tail` command prints the last 10 lines of a file:

  tail names.txt

To print a different number of lines, use the `-n` flag:

  tail -n 15 names.txt

To print all the lines excluding the FIRST 15, add a plus sign to the count:

  tail -n +15 names.txt


The grep command
----------------

The `grep` command searches a one or more files for a case-sensitive phrase:

  grep "Donald" famousducks.txt

To search for a case-insensitive phrase (i.e. "donald"), use the `-i` flag:

  grep -i "Donald" famousducks.txt

To search for the exact word "Donald" (i.e. not "McDonald"), use the `-w` flag:

  grep -w "Donald" famousducks.txt

To print out the matching line and the 4 lines AFTER it (5 lines total), use
the `-A` flag:

  grep -A 4 "Howard" famousducks.txt

To print out the matching line and the 4 lines BEFORE it (5 lines total), use
the `-B` flag:

  grep -B 4 "Howard" famousducks.txt

To print out the matching line, the 4 lines BEFORE it and the 4 lines AFTER it
(9 lines total), use the `-C` flag:

  grep -C 4 "Howard" famousducks.txt

To search for "McDuck" in every file in the current directory, use the `*` wildcard in the path.

  grep "McDuck" *

To search for "McDuck" in every file in the current directory AND its
subdirectories, use the `-r` flag.

  grep -r "McDuck" *

To print out the filenames instead of the matching lines, use the `-l` flag:

  grep -l "Daffy" *

To print out the number of matches, use the `-c` flag:

  grep -c "Daffy" *

To print the line numbers along with the matching lines, use the `-n` flag:

  grep -n "Daffy" famousducks.txt


Redirecting output to a file
----------------------------

To redirect the output of a command to a file, overwriting it if necessary, use
the `>` character followed by a file path.

  head names.txt > first10names.txt

To redirect the output of a command to a file, appending to it, use the `>>`
character followed by a file path.

  head names.txt >> first10names.txt


Piping output to a command
--------------------------

To pipe the output of a command to the input of another, use the `|` character.

  head names.txt | grep "Steve"

This is basically the same as doing:

  head names.txt > temporaryfile.txt
  grep "Steve" temporaryfile.txt
  rm temporaryfile.txt

Instead of first redirecting the output of `head` to a file and then running
`grep` on that file, the output from the first command is piped to the input of
the second.

Commands can be chained together using multiple pipes:

  grep "United States" addresses.csv | grep "California" | head

This would search the `addresses.csv` file for lines that contain the phrase
"United States", then search those results for lines that contain the phrase
"California", and then print out the first 10 of those matches.
